package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"os/exec"
	"regexp"
	"sort"
	"strings"
	"time"
)

type LogEntry struct {
	Timestamp time.Time
	Domain    string
	IP        string
	Proxied   bool
}

// DomainIPMap —Ö—Ä–∞–Ω–∏—Ç –º–∞–ø–ø–∏–Ω–≥ –¥–æ–º–µ–Ω–æ–≤ –Ω–∞ IP –∞–¥—Ä–µ—Å–∞
type DomainIPMap map[string][]string

func main() {
	log.Printf("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –ª–æ–≥–æ–≤ DNS —Å–µ—Ä–≤–∏—Å–∞...")

	// –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
	logs, err := getLogs()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: %v", err)
	}

	// –ü–∞—Ä—Å–∏–º –ª–æ–≥–∏
	entries := parseLogs(logs)
	log.Printf("–ù–∞–π–¥–µ–Ω–æ %d –∑–∞–ø–∏—Å–µ–π DNS", len(entries))

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–æ–º–µ–Ω–∞–º
	domainMap := groupByDomain(entries)
	log.Printf("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤: %d", len(domainMap))

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π map.json
	existingMap, err := loadExistingMap()
	if err != nil {
		log.Printf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π map.json: %v", err)
		existingMap = make(DomainIPMap)
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	mergedMap := mergeData(existingMap, domainMap)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π map.json
	if err := saveMapToFile(mergedMap, "recovered_map.json"); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v", err)
	}

	// –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	printStatistics(existingMap, mergedMap)

	log.Printf("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ recovered_map.json")
	log.Printf("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä: scp recovered_map.json root@176.114.88.142:/root/map.json")
}

func getLogs() (string, error) {
	log.Printf("–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")

	// –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
	cmd := exec.Command("ssh", "root@176.114.88.142",
		"journalctl -u dnspoxy.service --since '1 month ago' --no-pager")

	output, err := cmd.Output()
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ssh –∫–æ–º–∞–Ω–¥—ã: %v", err)
	}

	return string(output), nil
}

func parseLogs(logs string) []LogEntry {
	var entries []LogEntry

	// –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
	domainRegex := regexp.MustCompile(`(\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}).*–ü–æ–ª—É—á–µ–Ω DNS –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–º–µ–Ω–∞: (.+)`)
	ipRegex := regexp.MustCompile(`(\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}).*–ù–∞–π–¥–µ–Ω–∞ A –∑–∞–ø–∏—Å—å: (\d+\.\d+\.\d+\.\d+)`)
	proxiedRegex := regexp.MustCompile(`–±—É–¥–µ—Ç –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑`)

	lines := strings.Split(logs, "\n")

	var currentDomain string
	var currentTimestamp time.Time
	var currentProxied bool

	for _, line := range lines {
		// –ò—â–µ–º DNS –∑–∞–ø—Ä–æ—Å
		if matches := domainRegex.FindStringSubmatch(line); matches != nil {
			timestamp, err := time.Parse("2006/01/02 15:04:05", matches[1])
			if err != nil {
				continue
			}

			domain := strings.TrimSpace(strings.TrimSuffix(matches[2], "."))
			currentDomain = domain
			currentTimestamp = timestamp
			currentProxied = proxiedRegex.MatchString(line)
		}

		// –ò—â–µ–º A –∑–∞–ø–∏—Å—å
		if matches := ipRegex.FindStringSubmatch(line); matches != nil && currentDomain != "" {
			timestamp, err := time.Parse("2006/01/02 15:04:05", matches[1])
			if err != nil {
				continue
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ A –∑–∞–ø–∏—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –¥–æ–º–µ–Ω—É (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5 —Å–µ–∫—É–Ω–¥)
			if timestamp.Sub(currentTimestamp).Abs() <= 5*time.Second {
				entries = append(entries, LogEntry{
					Timestamp: timestamp,
					Domain:    currentDomain,
					IP:        matches[2],
					Proxied:   currentProxied,
				})
			}
		}
	}

	return entries
}

func groupByDomain(entries []LogEntry) DomainIPMap {
	domainMap := make(DomainIPMap)

	for _, entry := range entries {
		domain := strings.ToLower(entry.Domain)

		if domainMap[domain] == nil {
			domainMap[domain] = []string{}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
		found := false
		for _, existingIP := range domainMap[domain] {
			if existingIP == entry.IP {
				found = true
				break
			}
		}

		if !found {
			domainMap[domain] = append(domainMap[domain], entry.IP)
		}
	}

	return domainMap
}

func loadExistingMap() (DomainIPMap, error) {
	// –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
	cmd := exec.Command("scp", "root@176.114.88.142:/root/map.json", "./current_map.json")
	if err := cmd.Run(); err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å map.json —Å —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}

	data, err := os.ReadFile("./current_map.json")
	if err != nil {
		return nil, err
	}

	var domainMap DomainIPMap
	if err := json.Unmarshal(data, &domainMap); err != nil {
		return nil, err
	}

	return domainMap, nil
}

func mergeData(existing, recovered DomainIPMap) DomainIPMap {
	merged := make(DomainIPMap)

	// –ö–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
	for domain, ips := range existing {
		merged[domain] = make([]string, len(ips))
		copy(merged[domain], ips)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	for domain, ips := range recovered {
		if merged[domain] == nil {
			merged[domain] = []string{}
		}

		for _, ip := range ips {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
			found := false
			for _, existingIP := range merged[domain] {
				if existingIP == ip {
					found = true
					break
				}
			}

			if !found {
				merged[domain] = append(merged[domain], ip)
			}
		}
	}

	return merged
}

func saveMapToFile(domainMap DomainIPMap, filename string) error {
	data, err := json.MarshalIndent(domainMap, "", "  ")
	if err != nil {
		return err
	}

	return os.WriteFile(filename, data, 0644)
}

func printStatistics(existing, merged DomainIPMap) {
	fmt.Printf("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:\n")
	fmt.Printf("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")

	existingDomains := len(existing)
	existingIPs := 0
	for _, ips := range existing {
		existingIPs += len(ips)
	}

	mergedDomains := len(merged)
	mergedIPs := 0
	for _, ips := range merged {
		mergedIPs += len(ips)
	}

	newDomains := mergedDomains - existingDomains
	newIPs := mergedIPs - existingIPs

	fmt.Printf("üîç –ë—ã–ª–æ –¥–æ–º–µ–Ω–æ–≤:      %d\n", existingDomains)
	fmt.Printf("üìà –°—Ç–∞–ª–æ –¥–æ–º–µ–Ω–æ–≤:     %d (+%d)\n", mergedDomains, newDomains)
	fmt.Printf("üîç –ë—ã–ª–æ IP –∞–¥—Ä–µ—Å–æ–≤:   %d\n", existingIPs)
	fmt.Printf("üìà –°—Ç–∞–ª–æ IP –∞–¥—Ä–µ—Å–æ–≤:  %d (+%d)\n", mergedIPs, newIPs)
	fmt.Printf("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –¥–æ–º–µ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É IP
	fmt.Printf("\nüìã –¢–æ–ø-10 –¥–æ–º–µ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É IP:\n")
	type domainStat struct {
		domain string
		count  int
	}

	var stats []domainStat
	for domain, ips := range merged {
		stats = append(stats, domainStat{domain, len(ips)})
	}

	sort.Slice(stats, func(i, j int) bool {
		return stats[i].count > stats[j].count
	})

	for i, stat := range stats {
		if i >= 10 {
			break
		}
		fmt.Printf("   %2d. %-30s %d IP\n", i+1, stat.domain, stat.count)
	}
}
