package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"os/exec"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/vishvananda/netlink"
	"golang.org/x/sys/unix"
	_ "modernc.org/sqlite"
)

const (
	botToken = "8153937790:AAE49qW06omMZs5yc5VzOCv3bpmwHe_zaqk"
	password = "xnbdjxnbdj"
	dbPath   = "/root/bot.db"
)

// ConnRecord –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—É–¥–∞—á–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
type ConnRecord struct {
	Proto    string
	SrcIP    string
	SrcPort  uint16
	DstIP    string
	DstPort  uint16
	Attempts uint64
	Timeout  uint32
}

type Bot struct {
	api             *tgbotapi.BotAPI
	db              *sql.DB
	authorizedChats map[int64]bool
}

func NewBot() (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
	}

	db, err := sql.Open("sqlite", dbPath)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: %v", err)
	}

	bot := &Bot{
		api:             api,
		db:              db,
		authorizedChats: make(map[int64]bool),
	}

	if err := bot.initDB(); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: %v", err)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
	bot.loadAuthorizedChats()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω—é –±–æ—Ç–∞
	bot.setupBotCommands()

	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @%s", api.Self.UserName)
	return bot, nil
}

func (b *Bot) initDB() error {
	queries := []string{
		`CREATE TABLE IF NOT EXISTS authorized_chats (
			chat_id INTEGER PRIMARY KEY
		)`,
		`CREATE TABLE IF NOT EXISTS dns_logs (
			id INTEGER PRIMARY KEY AUTOINCREMENT,
			domain TEXT NOT NULL,
			ip TEXT NOT NULL,
			proxied BOOLEAN NOT NULL,
			timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
		)`,
		`CREATE INDEX IF NOT EXISTS idx_dns_domain ON dns_logs(domain)`,
		`CREATE INDEX IF NOT EXISTS idx_dns_ip ON dns_logs(ip)`,
	}

	for _, query := range queries {
		if _, err := b.db.Exec(query); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		}
	}

	return nil
}

func (b *Bot) loadAuthorizedChats() {
	rows, err := b.db.Query("SELECT chat_id FROM authorized_chats")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: %v", err)
		return
	}
	defer rows.Close()

	for rows.Next() {
		var chatID int64
		if err := rows.Scan(&chatID); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è chat_id: %v", err)
			continue
		}
		b.authorizedChats[chatID] = true
	}

	log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤", len(b.authorizedChats))
}

func (b *Bot) setupBotCommands() {
	commands := []tgbotapi.BotCommand{
		{Command: "pass", Description: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –±–æ—Ç–µ"},
		{Command: "wg", Description: "–°–æ–∑–¥–∞—Ç—å WireGuard –∫–æ–Ω—Ñ–∏–≥ + —Ñ–∞–π–ª"},
		{Command: "add_site", Description: "–î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç + –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ IP –≤ ipset"},
		{Command: "remove_site", Description: "–£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç + –æ—á–∏—Å—Ç–∏—Ç—å ipset"},
		{Command: "site", Description: "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–ª–∏ IP –ø–æ –¥–æ–º–µ–Ω–∞–º"},
		{Command: "conn", Description: "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"},
		{Command: "log", Description: "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–æ–º–µ–Ω–æ–≤ (–æ–±—ã—á–Ω—ã–µ)"},
		{Command: "help", Description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"},
	}

	config := tgbotapi.NewSetMyCommands(commands...)
	if _, err := b.api.Request(config); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: %v", err)
	}
}

func (b *Bot) isAuthorized(chatID int64) bool {
	return b.authorizedChats[chatID]
}

func (b *Bot) authorize(chatID int64) error {
	b.authorizedChats[chatID] = true

	_, err := b.db.Exec("INSERT OR IGNORE INTO authorized_chats (chat_id) VALUES (?)", chatID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %v", err)
	}

	return nil
}

func (b *Bot) handlePassCommand(message *tgbotapi.Message) {
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pass <–ø–∞—Ä–æ–ª—å>")
		b.api.Send(msg)
		return
	}

	if args[1] == password {
		if err := b.authorize(message.Chat.ID); err != nil {
			msg := tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
			b.api.Send(msg)
			return
		}

		msg := tgbotapi.NewMessage(message.Chat.ID, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.")
		b.api.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
		b.api.Send(msg)
	}
}

func (b *Bot) handleWgCommand(message *tgbotapi.Message) {
	if !b.isAuthorized(message.Chat.ID) {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>")
		b.api.Send(msg)
		return
	}

	args := strings.Fields(message.Text)
	if len(args) < 2 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /wg <username>")
		b.api.Send(msg)
		return
	}

	username := args[1]
	trimmedUsername := strings.TrimSpace(username)

	log.Printf("–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: /root/wg %s", trimmedUsername)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /root/wg
	cmd := exec.Command("/root/wg", trimmedUsername)
	output, err := cmd.CombinedOutput()

	log.Printf("–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–¥–æ–º –≤—ã—Ö–æ–¥–∞: %v", err)
	log.Printf("–ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: %s", string(output))

	if err != nil {
		errorMsg := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è %s:\n–ö–æ–¥ –æ—à–∏–±–∫–∏: %v\n–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n%s",
			trimmedUsername, err, string(output))
		log.Printf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è /root/wg: %s", errorMsg)

		msg := tgbotapi.NewMessage(message.Chat.ID, errorMsg)
		b.api.Send(msg)
		return
	}

	config := string(output)
	log.Printf("–ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s, —Ä–∞–∑–º–µ—Ä: %d –±–∞–π—Ç", trimmedUsername, len(config))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –∫–∞–∫ —Ç–µ–∫—Å—Ç
	msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("üîê WireGuard –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è %s:\n\n```\n%s\n```", username, config))
	msg.ParseMode = "Markdown"
	b.api.Send(msg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
	file := tgbotapi.FileBytes{
		Name:  "wg200.conf",
		Bytes: []byte(config),
	}

	doc := tgbotapi.NewDocument(message.Chat.ID, file)
	doc.Caption = fmt.Sprintf("WireGuard –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è %s", username)
	b.api.Send(doc)
}

func (b *Bot) handleAddSiteCommand(message *tgbotapi.Message) {
	if !b.isAuthorized(message.Chat.ID) {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>")
		b.api.Send(msg)
		return
	}

	args := strings.Fields(message.Text)
	if len(args) < 2 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_site <–ø–∞—Ç—Ç–µ—Ä–Ω>")
		b.api.Send(msg)
		return
	}

	pattern := args[1]

	// –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª /root/site
	if err := b.addPatternToFile(pattern); err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: %v", err))
		b.api.Send(msg)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ IP –≤ ipset
	ips := b.getHistoricalIPs(pattern)
	added := 0
	for _, ip := range ips {
		if err := b.addIPToIpset(ip); err == nil {
			added++
		}
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω '%s' –¥–æ–±–∞–≤–ª–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ %d IP –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤ ipset.", pattern, added))
	b.api.Send(msg)
}

func (b *Bot) handleRemoveSiteCommand(message *tgbotapi.Message) {
	if !b.isAuthorized(message.Chat.ID) {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>")
		b.api.Send(msg)
		return
	}

	args := strings.Fields(message.Text)
	if len(args) < 2 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_site <–ø–∞—Ç—Ç–µ—Ä–Ω>")
		b.api.Send(msg)
		return
	}

	pattern := args[1]

	// –ü–æ–ª—É—á–∞–µ–º IP –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ ipset
	ips := b.getHistoricalIPs(pattern)

	// –£–¥–∞–ª—è–µ–º –∏–∑ —Ñ–∞–π–ª–∞ /root/site
	if err := b.removePatternFromFile(pattern); err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: %v", err))
		b.api.Send(msg)
		return
	}

	// –£–¥–∞–ª—è–µ–º IP –∏–∑ ipset
	removed := 0
	for _, ip := range ips {
		if err := b.removeIPFromIpset(ip); err == nil {
			removed++
		}
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω '%s' —É–¥–∞–ª–µ–Ω. –£–¥–∞–ª–µ–Ω–æ %d IP –∏–∑ ipset.", pattern, removed))
	b.api.Send(msg)
}

func (b *Bot) handleSiteCommand(message *tgbotapi.Message) {
	if !b.isAuthorized(message.Chat.ID) {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>")
		b.api.Send(msg)
		return
	}

	args := strings.Fields(message.Text)

	// –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
	if len(args) < 2 {
		b.showAllPatterns(message.Chat.ID)
		return
	}

	pattern := args[1]
	domainIPs := b.getHistoricalIPsWithDomains(pattern)

	if len(domainIPs) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", pattern))
		b.api.Send(msg)
		return
	}

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ IP
	totalIPs := 0
	for _, ips := range domainIPs {
		totalIPs += len(ips)
	}

	// –°–æ–∑–¥–∞–µ–º HTML —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
	messages := b.createSiteMessages(pattern, domainIPs, totalIPs)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	for _, msgText := range messages {
		msg := tgbotapi.NewMessage(message.Chat.ID, msgText)
		msg.ParseMode = "HTML"
		b.api.Send(msg)

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
		time.Sleep(100 * time.Millisecond)
	}
}

func (b *Bot) handleConnCommand(message *tgbotapi.Message) {
	if !b.isAuthorized(message.Chat.ID) {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>")
		b.api.Send(msg)
		return
	}

	failedConnections := b.getFailedConnections()

	if len(failedConnections) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
		b.api.Send(msg)
		return
	}

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ IP
	totalIPs := 0
	for _, ips := range failedConnections {
		totalIPs += len(ips)
	}

	// –°–æ–∑–¥–∞–µ–º HTML —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
	messages := b.createConnMessages(failedConnections, totalIPs)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	for _, msgText := range messages {
		msg := tgbotapi.NewMessage(message.Chat.ID, msgText)
		msg.ParseMode = "HTML"
		b.api.Send(msg)

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
		time.Sleep(100 * time.Millisecond)
	}
}

func (b *Bot) handleLogCommand(message *tgbotapi.Message) {
	if !b.isAuthorized(message.Chat.ID) {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>")
		b.api.Send(msg)
		return
	}

	// –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	limit := 10

	args := strings.Fields(message.Text)
	if len(args) >= 2 {
		if v, err := strconv.Atoi(args[1]); err == nil && v > 0 {
			limit = v
		}
	}

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –±–∞–∑—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã (–Ω–µ –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º—ã–µ)
	rows, err := b.db.Query(`SELECT domain, MAX(timestamp) AS ts
		FROM dns_logs
		WHERE proxied = 0
		GROUP BY domain
		ORDER BY ts DESC
		LIMIT ?`, limit)
	if err != nil {
		log.Printf("DB query failed /log: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ")
		b.api.Send(msg)
		return
	}
	defer rows.Close()

	var domains []string
	for rows.Next() {
		var domain string
		var ts string
		if err := rows.Scan(&domain, &ts); err == nil {
			domains = append(domains, domain)
		}
	}

	if len(domains) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "üìù –î–æ–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		b.api.Send(msg)
		return
	}

	response := fmt.Sprintf("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ %d –¥–æ–º–µ–Ω–æ–≤ (–æ–±—ã—á–Ω—ã–µ):\n\n", len(domains))
	for i, d := range domains {
		response += fmt.Sprintf("%2d. <code>%s</code>\n", i+1, d)
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, response)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
}

func (b *Bot) handleHelpCommand(message *tgbotapi.Message) {
	help := `ü§ñ DNS Proxy Bot

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/pass <–ø–∞—Ä–æ–ª—å> - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –±–æ—Ç–µ
/wg <username> - –°–æ–∑–¥–∞—Ç—å WireGuard –∫–æ–Ω—Ñ–∏–≥ + —Ñ–∞–π–ª
/add_site <–ø–∞—Ç—Ç–µ—Ä–Ω> - –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç + –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ IP –≤ ipset
/remove_site <–ø–∞—Ç—Ç–µ—Ä–Ω> - –£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç + –æ—á–∏—Å—Ç–∏—Ç—å ipset
/site [–ø–∞—Ç—Ç–µ—Ä–Ω] - –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–ª–∏ IP –ø–æ –¥–æ–º–µ–Ω–∞–º
/conn - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏)
/log [n] - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–æ–º–µ–Ω–æ–≤ (–æ–±—ã—á–Ω—ã–µ), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìù –ü—Ä–∏–º–µ—Ä—ã:
/site          # –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º IP
/site you      # –ø–æ–∫–∞–∂–µ—Ç youtube.com, youtu.be —Å IP (—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º–æ)
/site cursor   # –ø–æ–∫–∞–∂–µ—Ç api2.cursor.sh —Å IP
/add_site figma
/wg myuser

üí° /site –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–µ –±–ª–æ–∫–∏
üö´ /conn –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP (—Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏)`

	msg := tgbotapi.NewMessage(message.Chat.ID, help)
	b.api.Send(msg)
}

func (b *Bot) addPatternToFile(pattern string) error {
	file, err := os.OpenFile(patternFile, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer file.Close()

	_, err = file.WriteString(pattern + "\n")
	return err
}

func (b *Bot) removePatternFromFile(pattern string) error {
	content, err := os.ReadFile(patternFile)
	if err != nil {
		return err
	}

	lines := strings.Split(string(content), "\n")
	var newLines []string

	for _, line := range lines {
		if strings.TrimSpace(line) != pattern {
			newLines = append(newLines, line)
		}
	}

	return os.WriteFile(patternFile, []byte(strings.Join(newLines, "\n")), 0644)
}

func (b *Bot) getHistoricalIPs(pattern string) []string {
	domainIPs := b.getHistoricalIPsWithDomains(pattern)

	var ips []string
	for _, domainIPs := range domainIPs {
		ips = append(ips, domainIPs...)
	}

	return ips
}

func (b *Bot) getHistoricalIPsWithDomains(pattern string) map[string][]string {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Ñ–∞–π–ª
	data, err := os.ReadFile(mapFile)
	if err != nil {
		return make(map[string][]string)
	}

	var domainMap DomainIPMap
	if err := json.Unmarshal(data, &domainMap); err != nil {
		return make(map[string][]string)
	}

	result := make(map[string][]string)
	for domain, domainIPs := range domainMap {
		if strings.Contains(domain, pattern) {
			result[domain] = domainIPs
		}
	}

	return result
}

// showAllPatterns –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º IP
func (b *Bot) showAllPatterns(chatID int64) {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
	patterns, err := b.loadPatterns()
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
		b.api.Send(msg)
		return
	}

	if len(patterns) == 0 {
		msg := tgbotapi.NewMessage(chatID, "üìù –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		b.api.Send(msg)
		return
	}

	response := fmt.Sprintf("üìù <b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã</b> (%d):\n\n", len(patterns))

	for _, pattern := range patterns {
		domainIPs := b.getHistoricalIPsWithDomains(pattern)
		totalIPs := 0
		for _, ips := range domainIPs {
			totalIPs += len(ips)
		}
		response += fmt.Sprintf("üîπ <code>%s</code> ‚Äî %d IP\n", pattern, totalIPs)
	}

	response += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/site &lt;–ø–∞—Ç—Ç–µ—Ä–Ω&gt;</code> –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"

	msg := tgbotapi.NewMessage(chatID, response)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
}

// loadPatterns –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
func (b *Bot) loadPatterns() ([]string, error) {
	content, err := os.ReadFile(patternFile)
	if err != nil {
		return nil, err
	}

	lines := strings.Split(string(content), "\n")
	var patterns []string

	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line != "" && !strings.HasPrefix(line, "#") {
			patterns = append(patterns, line)
		}
	}

	return patterns, nil
}

// createSiteMessages —Å–æ–∑–¥–∞–µ—Ç HTML —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É
func (b *Bot) createSiteMessages(pattern string, domainIPs map[string][]string, totalIPs int) []string {
	const maxMessageSize = 4000 // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–æ 4096

	var messages []string
	currentMessage := fmt.Sprintf("üåê <b>IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ '%s'</b> (%d –¥–æ–º–µ–Ω–æ–≤, %d IP):\n\n",
		pattern, len(domainIPs), totalIPs)

	for domain, ips := range domainIPs {
		// –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –¥–ª—è –¥–æ–º–µ–Ω–∞
		domainBlock := b.createDomainBlock(domain, ips)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
		if len(currentMessage)+len(domainBlock) > maxMessageSize {
			// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
			messages = append(messages, currentMessage)
			// –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			currentMessage = fmt.Sprintf("üåê <b>IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ '%s'</b> (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):\n\n", pattern)
		}

		currentMessage += domainBlock
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if len(strings.TrimSpace(currentMessage)) > 0 {
		messages = append(messages, currentMessage)
	}

	return messages
}

// createDomainBlock —Å–æ–∑–¥–∞–µ—Ç HTML –±–ª–æ–∫ –¥–ª—è –¥–æ–º–µ–Ω–∞ —Å IP –∞–¥—Ä–µ—Å–∞–º–∏
func (b *Bot) createDomainBlock(domain string, ips []string) string {
	const maxIPsToShow = 20
	ipCount := len(ips)

	block := fmt.Sprintf("üåç <b>%s</b> ‚Äî %d IP\n", domain, ipCount)

	// –ï—Å–ª–∏ IP –º–µ–Ω—å—à–µ 5, –Ω–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
	if ipCount <= 5 {
		for _, ip := range ips {
			block += fmt.Sprintf("   ‚Ä¢ <code>%s</code>\n", ip)
		}
	} else {
		// –°–æ–∑–¥–∞–µ–º —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–π –±–ª–æ–∫
		ipList := ""
		displayIPs := ips
		hasMore := false

		if ipCount > maxIPsToShow {
			displayIPs = ips[:maxIPsToShow]
			hasMore = true
		}

		for _, ip := range displayIPs {
			ipList += fmt.Sprintf("   ‚Ä¢ <code>%s</code>\n", ip)
		}

		if hasMore {
			ipList += fmt.Sprintf("   ... –∏ –µ—â–µ %d IP –∞–¥—Ä–µ—Å–æ–≤", ipCount-maxIPsToShow)
		}

		block += fmt.Sprintf("<blockquote expandable>%s</blockquote>\n", ipList)
	}

	block += "\n"
	return block
}

// createConnMessages —Å–æ–∑–¥–∞–µ—Ç HTML —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É
func (b *Bot) createConnMessages(failedConnections map[string][]string, totalIPs int) []string {
	const maxMessageSize = 4000 // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–æ 4096

	var messages []string
	currentMessage := fmt.Sprintf("üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã</b> (%d –∑–∞–ø–∏—Å–µ–π, %d IP):\n\n",
		len(failedConnections), totalIPs)

	for domain, ips := range failedConnections {
		// –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –¥–ª—è –¥–æ–º–µ–Ω–∞
		domainBlock := b.createDomainBlock(domain, ips)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
		if len(currentMessage)+len(domainBlock) > maxMessageSize {
			// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
			messages = append(messages, currentMessage)
			// –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			currentMessage = "üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã</b> (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):\n\n"
		}

		currentMessage += domainBlock
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if len(strings.TrimSpace(currentMessage)) > 0 {
		messages = append(messages, currentMessage)
	}

	return messages
}

func (b *Bot) addIPToIpset(ip string) error {
	cmd := exec.Command("ipset", "add", ipsetName, ip, "-exist")
	return cmd.Run()
}

func (b *Bot) removeIPFromIpset(ip string) error {
	cmd := exec.Command("ipset", "del", ipsetName, ip)
	return cmd.Run()
}

func (b *Bot) getFailedConnections() map[string][]string {
	log.Printf("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ conntrack")

	result := make(map[string][]string)
	currentTime := time.Now()
	cutoffTime := currentTime.Add(-2 * time.Minute) // –¢–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã

	// –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ conntrack
	flows, err := netlink.ConntrackTableList(netlink.ConntrackTable, unix.AF_INET)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è conntrack –¥–∞–Ω–Ω—ã—Ö: %v", err)
		return result
	}

	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ %d –∑–∞–ø–∏—Å–µ–π conntrack", len(flows))

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º—ã–µ IP
	patterns, _ := b.loadPatterns()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ IP -> –¥–æ–º–µ–Ω—ã –∏–∑ –Ω–∞—à–µ–≥–æ JSON —Ñ–∞–π–ª–∞
	proxiedIPs := make(map[string]bool)
	ipToDomain := make(map[string][]string)
	data, err := os.ReadFile(mapFile)
	if err == nil {
		var domainMap DomainIPMap
		if err := json.Unmarshal(data, &domainMap); err == nil {
			// –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º—ã—Ö IP
			for domain, ips := range domainMap {
				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–º–µ–Ω –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º—ã–º
				isProxied := false
				for _, p := range patterns {
					if strings.Contains(domain, p) {
						isProxied = true
						break
					}
				}

				for _, ip := range ips {
					if isProxied {
						proxiedIPs[ip] = true // –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º—ã–π
					}
					ipToDomain[ip] = append(ipToDomain[ip], domain)
				}
			}
		}
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	failedCount := 0
	recentCount := 0
	cutoffTimestamp := uint64(cutoffTime.Unix())

	for _, f := range flows {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏
		if f.Reverse.Packets != 0 {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (TimeStart –≤ —Å–µ–∫—É–Ω–¥–∞—Ö Unix timestamp)
		if f.TimeStart != 0 && f.TimeStart < cutoffTimestamp {
			continue
		}

		// –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:
		// 1. –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–±–æ–ª—å—à–µ 1 –ø–∞–∫–µ—Ç–∞)
		// 2. –õ–∏–±–æ –¥–æ–ª–≥–∏–π —Ç–∞–π–º–∞—É—Ç (–±–æ–ª—å—à–µ 60 —Å–µ–∫)
		if f.Forward.Packets < 2 && f.TimeOut < 60 {
			continue
		}

		recentCount++
		dstIP := f.Forward.DstIP.String()

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ù–ï–ø—Ä–æ–∫—Å–∏—Ä—É–µ–º—ã–µ IP (–æ–±—ã—á–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
		if !proxiedIPs[dstIP] {
			failedCount++
			// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–æ–º–µ–Ω –ø–æ IP, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º IP –∫–∞–∫ –∫–ª—é—á
			if domains, found := ipToDomain[dstIP]; found {
				for _, domain := range domains {
					if result[domain] == nil {
						result[domain] = []string{}
					}
					if !b.containsIP(result[domain], dstIP) {
						result[domain] = append(result[domain], dstIP)
					}
				}
			}
			//  else {
			// 	// –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö IP –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º IP –∫–∞–∫ –∫–ª—é—á
			// 	domainKey := dstIP
			// 	if result[domainKey] == nil {
			// 		result[domainKey] = []string{}
			// 	}
			// 	if !b.containsIP(result[domainKey], dstIP) {
			// 		result[domainKey] = append(result[domainKey], dstIP)
			// 	}
			// }
		}
	}

	log.Printf("–ò–∑ %d –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ %d –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –æ–±—ã—á–Ω—ã–º IP, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ %d –∑–∞–ø–∏—Å–µ–π",
		recentCount, failedCount, len(result))
	return result
}

// containsIP –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ IP –≤ —Å–ª–∞–π—Å–µ
func (b *Bot) containsIP(ips []string, targetIP string) bool {
	for _, ip := range ips {
		if ip == targetIP {
			return true
		}
	}
	return false
}

func (b *Bot) Run() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		if !update.Message.IsCommand() {
			continue
		}

		switch update.Message.Command() {
		case "start", "help":
			b.handleHelpCommand(update.Message)
		case "pass":
			b.handlePassCommand(update.Message)
		case "wg":
			b.handleWgCommand(update.Message)
		case "add_site":
			b.handleAddSiteCommand(update.Message)
		case "remove_site":
			b.handleRemoveSiteCommand(update.Message)
		case "site":
			b.handleSiteCommand(update.Message)
		case "conn":
			b.handleConnCommand(update.Message)
		case "log":
			b.handleLogCommand(update.Message)
		default:
			if b.isAuthorized(update.Message.Chat.ID) {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
				b.api.Send(msg)
			}
		}
	}
}

func (b *Bot) Close() {
	if b.db != nil {
		b.db.Close()
	}
}

// StartBot –∑–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
func StartBot() {
	go func() {
		log.Printf("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

		bot, err := NewBot()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
			return
		}
		defer bot.Close()

		log.Printf("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
		bot.Run()
	}()
}
