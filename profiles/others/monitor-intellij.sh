#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ IntelliJ IDEA

IDEA_PID=$(pgrep -f "idea" | head -n 1)
if [ -z "$IDEA_PID" ]; then
    echo "IntelliJ IDEA –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
    exit 1
fi

echo "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ IntelliJ IDEA (PID: $IDEA_PID)"
echo "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"

# –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FILE="idea-monitor-$(date +%Y%m%d_%H%M%S).log"
echo "Timestamp,CPU%,Memory_MB,Threads,FD_Count,GC_Count,Heap_Used_MB,Heap_Max_MB" > $LOG_FILE

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
get_stats() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # CPU –∏ –ø–∞–º—è—Ç—å –æ—Ç top
    local cpu_mem=$(top -p $IDEA_PID -b -n 1 | tail -n 1 | awk '{print $9","$10}')
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
    local threads=$(ps -p $IDEA_PID -o thcount --no-headers)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
    local fd_count=$(lsof -p $IDEA_PID 2>/dev/null | wc -l)
    
    # Java-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    local gc_info=$(jstat -gc $IDEA_PID 2>/dev/null | tail -n 1)
    local gc_count=$(echo $gc_info | awk '{print $3+$5}')
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ heap
    local heap_info=$(jstat -gccapacity $IDEA_PID 2>/dev/null | tail -n 1)
    local heap_used=$(jmap -histo $IDEA_PID 2>/dev/null | head -n 1 | grep -o '[0-9]*' | head -n 1)
    local heap_max=$(echo $heap_info | awk '{print $10/1024}')
    
    echo "$timestamp,$cpu_mem,$threads,$fd_count,$gc_count,$heap_used,$heap_max" >> $LOG_FILE
    
    # –í—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω
    printf "\r%s | CPU: %s | Mem: %s | Threads: %s | FD: %s | GC: %s" \
           "$timestamp" \
           "$(echo $cpu_mem | cut -d, -f1)%" \
           "$(echo $cpu_mem | cut -d, -f2)" \
           "$threads" \
           "$fd_count" \
           "$gc_count"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º CPU
analyze_high_cpu() {
    local cpu_usage=$1
    if (( $(echo "$cpu_usage > 50" | bc -l) )); then
        echo -e "\nüî• –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ CPU: $cpu_usage%"
        
        # –î–∞–º–ø –ø–æ—Ç–æ–∫–æ–≤
        echo "–°–æ–∑–¥–∞—é –¥–∞–º–ø –ø–æ—Ç–æ–∫–æ–≤..."
        jstack $IDEA_PID > "high-cpu-threads-$(date +%Y%m%d_%H%M%S).txt"
        
        # –¢–æ–ø –º–µ—Ç–æ–¥–æ–≤ –ø–æ CPU
        echo "–ó–∞–ø—É—Å–∫–∞—é –±—ã—Å—Ç—Ä–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ..."
        timeout 10 ./async-profiler/bin/asprof -e cpu -d 10 -f "high-cpu-$(date +%Y%m%d_%H%M%S).html" $IDEA_PID 2>/dev/null &
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        echo "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã..."
        timeout 5 strace -p $IDEA_PID -c -f 2>"syscall-$(date +%Y%m%d_%H%M%S).txt" &
    fi
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
while true; do
    get_stats
    
    # –ü–æ–ª—É—á–∞–µ–º CPU usage –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    cpu_usage=$(top -p $IDEA_PID -b -n 1 | tail -n 1 | awk '{print $9}')
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ CPU
    if [[ ! -z "$cpu_usage" ]]; then
        analyze_high_cpu $cpu_usage
    fi
    
    sleep 2
done 