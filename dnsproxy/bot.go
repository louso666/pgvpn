package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"os/exec"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/vishvananda/netlink"
	"golang.org/x/sys/unix"
	_ "modernc.org/sqlite"
)

const (
	botToken = "1481492430:AAHvpDUOG67c0QLFtZrhvKGBqBPJf2K8qV0"
	password = "_Texxi155775"
	dbPath   = "/root/bot.db"

	// –§–∞–π–ª—ã –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ —Ç–∏–ø–∞–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ (–ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –ú–ï–°–¢–û)
	patternFileNL  = "/root/site_nl"  // –¥–ª—è –ê–º—Å—Ç–µ—Ä–¥–∞–º–∞ (NL)
	patternFileUSA = "/root/site_usa" // –¥–ª—è –ê–º–µ—Ä–∏–∫–∏ (USA)

	// ipset —Å–ø–∏—Å–∫–∏ (–ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –ú–ï–°–¢–û)
	ipsetNL  = "nl_proxy"
	ipsetUSA = "usa_proxy"
)

// ConnRecord –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—É–¥–∞—á–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
type ConnRecord struct {
	Proto    string
	SrcIP    string
	SrcPort  uint16
	DstIP    string
	DstPort  uint16
	Attempts uint64
	Timeout  uint32
}

type Bot struct {
	api             *tgbotapi.BotAPI
	db              *sql.DB
	authorizedChats map[int64]bool
}

func NewBot() (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
	}

	db, err := sql.Open("sqlite", dbPath)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: %v", err)
	}

	bot := &Bot{
		api:             api,
		db:              db,
		authorizedChats: make(map[int64]bool),
	}

	if err := bot.initDB(); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: %v", err)
	}

	bot.loadAuthorizedChats()
	bot.setupBotCommands()

	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @%s", api.Self.UserName)
	return bot, nil
}

func (b *Bot) initDB() error {
	queries := []string{
		`CREATE TABLE IF NOT EXISTS authorized_chats (
			chat_id INTEGER PRIMARY KEY
		)`,
		`CREATE TABLE IF NOT EXISTS dns_logs (
			id INTEGER PRIMARY KEY AUTOINCREMENT,
			domain TEXT NOT NULL,
			ip TEXT NOT NULL,
			proxied BOOLEAN NOT NULL,
			timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
		)`,
		`CREATE INDEX IF NOT EXISTS idx_dns_domain ON dns_logs(domain)`,
		`CREATE INDEX IF NOT EXISTS idx_dns_ip ON dns_logs(ip)`,
	}
	for _, q := range queries {
		if _, err := b.db.Exec(q); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		}
	}
	return nil
}

func (b *Bot) loadAuthorizedChats() {
	rows, err := b.db.Query("SELECT chat_id FROM authorized_chats")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: %v", err)
		return
	}
	defer rows.Close()

	for rows.Next() {
		var chatID int64
		if err := rows.Scan(&chatID); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è chat_id: %v", err)
			continue
		}
		b.authorizedChats[chatID] = true
	}
	log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤", len(b.authorizedChats))
}

func (b *Bot) setupBotCommands() {
	commands := []tgbotapi.BotCommand{
		{Command: "pass", Description: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –±–æ—Ç–µ"},
		{Command: "wg", Description: "–°–æ–∑–¥–∞—Ç—å WireGuard –∫–æ–Ω—Ñ–∏–≥ + —Ñ–∞–π–ª"},
		{Command: "add_nl", Description: "–î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç –≤ —Å–ø–∏—Å–æ–∫ NL (–ê–º—Å—Ç–µ—Ä–¥–∞–º)"},
		{Command: "add_usa", Description: "–î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç –≤ —Å–ø–∏—Å–æ–∫ USA (–ê–º–µ—Ä–∏–∫–∞)"},
		{Command: "remove_nl", Description: "–£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ NL"},
		{Command: "remove_usa", Description: "–£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ USA"},
		{Command: "site", Description: "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–ª–∏ IP –ø–æ –¥–æ–º–µ–Ω–∞–º"},
		{Command: "nl", Description: "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ NL –ø–∞—Ç—Ç–µ—Ä–Ω—ã/–¥–æ–º–µ–Ω—ã"},
		{Command: "ru", Description: "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ RU –¥–æ–º–µ–Ω—ã (–ø—Ä—è–º—ã–µ)"},
		{Command: "usa", Description: "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ USA –ø–∞—Ç—Ç–µ—Ä–Ω—ã/–¥–æ–º–µ–Ω—ã"},
		{Command: "conn", Description: "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"},
		{Command: "log", Description: "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–æ–º–µ–Ω–æ–≤ (–æ–±—ã—á–Ω—ã–µ)"},
		{Command: "help", Description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"},
	}
	if _, err := b.api.Request(tgbotapi.NewSetMyCommands(commands...)); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: %v", err)
	}
}

func (b *Bot) isAuthorized(chatID int64) bool { return b.authorizedChats[chatID] }

func (b *Bot) authorize(chatID int64) error {
	b.authorizedChats[chatID] = true
	_, err := b.db.Exec("INSERT OR IGNORE INTO authorized_chats (chat_id) VALUES (?)", chatID)
	return err
}

func (b *Bot) handlePassCommand(m *tgbotapi.Message) {
	args := strings.Fields(m.Text)
	if len(args) < 2 {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pass <–ø–∞—Ä–æ–ª—å>"))
		return
	}
	if args[1] == password {
		if err := b.authorize(m.Chat.ID); err != nil {
			b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"))
			return
		}
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"))
	} else {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"))
	}
}

func (b *Bot) handleWgCommand(m *tgbotapi.Message) {
	if !b.isAuthorized(m.Chat.ID) {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>"))
		return
	}
	args := strings.Fields(m.Text)
	if len(args) < 2 {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /wg <username>"))
		return
	}
	username := strings.TrimSpace(args[1])
	cmd := exec.Command("/root/wg", username)
	output, err := cmd.CombinedOutput()
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID,
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è %s:\n%v\n%s", username, err, string(output))))
		return
	}
	cfg := string(output)
	msg := tgbotapi.NewMessage(m.Chat.ID, fmt.Sprintf("üîê WireGuard –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è %s:\n\n```\n%s\n```", username, cfg))
	msg.ParseMode = "Markdown"
	b.api.Send(msg)
	doc := tgbotapi.NewDocument(m.Chat.ID, tgbotapi.FileBytes{Name: "wg200.conf", Bytes: []byte(cfg)})
	doc.Caption = fmt.Sprintf("WireGuard –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è %s", username)
	b.api.Send(doc)
}

func (b *Bot) handleAddNLCommand(m *tgbotapi.Message) {
	if !b.isAuthorized(m.Chat.ID) {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>"))
		return
	}
	args := strings.Fields(m.Text)
	if len(args) < 2 {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_nl <–ø–∞—Ç—Ç–µ—Ä–Ω>"))
		return
	}
	pattern := args[1]
	_ = b.removePatternFromOtherFile(pattern, "usa")
	if err := b.addPatternToFileNL(pattern); err != nil {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: %v", err)))
		return
	}
	ips := b.getHistoricalIPs(pattern)
	added := 0
	for _, ip := range ips {
		if err := b.addIPToIpsetNL(ip); err == nil {
			added++
		}
		_ = b.removeIPFromIpsetUSA(ip)
	}
	b.api.Send(tgbotapi.NewMessage(m.Chat.ID,
		fmt.Sprintf("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω '%s' –¥–æ–±–∞–≤–ª–µ–Ω –≤ NL. –î–æ–±–∞–≤–ª–µ–Ω–æ %d IP –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.", pattern, added)))
}

func (b *Bot) handleAddUSACommand(m *tgbotapi.Message) {
	if !b.isAuthorized(m.Chat.ID) {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>"))
		return
	}
	args := strings.Fields(m.Text)
	if len(args) < 2 {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_usa <–ø–∞—Ç—Ç–µ—Ä–Ω>"))
		return
	}
	pattern := args[1]
	_ = b.removePatternFromOtherFile(pattern, "nl")
	if err := b.addPatternToFileUSA(pattern); err != nil {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: %v", err)))
		return
	}
	ips := b.getHistoricalIPs(pattern)
	added := 0
	for _, ip := range ips {
		if err := b.addIPToIpsetUSA(ip); err == nil {
			added++
		}
		_ = b.removeIPFromIpsetNL(ip)
	}
	b.api.Send(tgbotapi.NewMessage(m.Chat.ID,
		fmt.Sprintf("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω '%s' –¥–æ–±–∞–≤–ª–µ–Ω –≤ USA. –î–æ–±–∞–≤–ª–µ–Ω–æ %d IP –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.", pattern, added)))
}

func (b *Bot) handleRemoveNLCommand(m *tgbotapi.Message) {
	if !b.isAuthorized(m.Chat.ID) {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>"))
		return
	}
	args := strings.Fields(m.Text)
	if len(args) < 2 {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_nl <–ø–∞—Ç—Ç–µ—Ä–Ω>"))
		return
	}
	pattern := args[1]
	ips := b.getHistoricalIPs(pattern)
	if err := b.removePatternFromFileNL(pattern); err != nil {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: %v", err)))
		return
	}
	removed := 0
	for _, ip := range ips {
		if err := b.removeIPFromIpsetNL(ip); err == nil {
			removed++
		}
	}
	b.api.Send(tgbotapi.NewMessage(m.Chat.ID,
		fmt.Sprintf("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω '%s' —É–¥–∞–ª–µ–Ω –∏–∑ NL. –£–¥–∞–ª–µ–Ω–æ %d IP –∏–∑ ipset.", pattern, removed)))
}

func (b *Bot) handleRemoveUSACommand(m *tgbotapi.Message) {
	if !b.isAuthorized(m.Chat.ID) {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>"))
		return
	}
	args := strings.Fields(m.Text)
	if len(args) < 2 {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_usa <–ø–∞—Ç—Ç–µ—Ä–Ω>"))
		return
	}
	pattern := args[1]
	ips := b.getHistoricalIPs(pattern)
	if err := b.removePatternFromFileUSA(pattern); err != nil {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: %v", err)))
		return
	}
	removed := 0
	for _, ip := range ips {
		if err := b.removeIPFromIpsetUSA(ip); err == nil {
			removed++
		}
	}
	b.api.Send(tgbotapi.NewMessage(m.Chat.ID,
		fmt.Sprintf("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω '%s' —É–¥–∞–ª–µ–Ω –∏–∑ USA. –£–¥–∞–ª–µ–Ω–æ %d IP –∏–∑ ipset.", pattern, removed)))
}

func (b *Bot) handleSiteCommand(m *tgbotapi.Message) {
	if !b.isAuthorized(m.Chat.ID) {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>"))
		return
	}
	args := strings.Fields(m.Text)
	if len(args) < 2 {
		b.showAllPatterns(m.Chat.ID)
		return
	}
	pattern := args[1]
	domainIPs := b.getHistoricalIPsWithDomains(pattern)
	if len(domainIPs) == 0 {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, fmt.Sprintf("‚ùå IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", pattern)))
		return
	}
	totalIPs := 0
	for _, ips := range domainIPs {
		totalIPs += len(ips)
	}
	for _, msgText := range b.createSiteMessages(pattern, domainIPs, totalIPs) {
		msg := tgbotapi.NewMessage(m.Chat.ID, msgText)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
		time.Sleep(100 * time.Millisecond)
	}
}

func (b *Bot) handleNLCommand(m *tgbotapi.Message) {
	if !b.isAuthorized(m.Chat.ID) {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>"))
		return
	}
	args := strings.Fields(m.Text)
	if len(args) < 2 {
		b.showPatternsNL(m.Chat.ID)
		return
	}
	b.showPatternDetails(m.Chat.ID, args[1], "nl")
}

func (b *Bot) handleRuCommand(m *tgbotapi.Message) {
	if !b.isAuthorized(m.Chat.ID) {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>"))
		return
	}
	args := strings.Fields(m.Text)
	if len(args) < 2 {
		b.showPatternsRU(m.Chat.ID)
		return
	}
	b.showPatternDetails(m.Chat.ID, args[1], "ru")
}

func (b *Bot) handleUSACommand(m *tgbotapi.Message) {
	if !b.isAuthorized(m.Chat.ID) {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>"))
		return
	}
	args := strings.Fields(m.Text)
	if len(args) < 2 {
		b.showPatternsUSA(m.Chat.ID)
		return
	}
	b.showPatternDetails(m.Chat.ID, args[1], "usa")
}

func (b *Bot) handleConnCommand(m *tgbotapi.Message) {
	if !b.isAuthorized(m.Chat.ID) {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>"))
		return
	}
	failedConnections := b.getFailedConnections()
	if len(failedConnections) == 0 {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"))
		return
	}
	totalIPs := 0
	for _, ips := range failedConnections {
		totalIPs += len(ips)
	}
	for _, msgText := range b.createConnMessages(failedConnections, totalIPs) {
		msg := tgbotapi.NewMessage(m.Chat.ID, msgText)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
		time.Sleep(100 * time.Millisecond)
	}
}

func (b *Bot) handleLogCommand(m *tgbotapi.Message) {
	if !b.isAuthorized(m.Chat.ID) {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /pass <–ø–∞—Ä–æ–ª—å>"))
		return
	}
	limit := 10
	args := strings.Fields(m.Text)
	if len(args) >= 2 {
		if v, err := strconv.Atoi(args[1]); err == nil && v > 0 {
			limit = v
		}
	}
	rows, err := b.db.Query(`SELECT domain, MAX(timestamp) AS ts
		FROM dns_logs
		WHERE proxied = 0
		GROUP BY domain
		ORDER BY ts DESC
		LIMIT ?`, limit)
	if err != nil {
		log.Printf("DB query failed /log: %v", err)
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ"))
		return
	}
	defer rows.Close()

	var domains []string
	for rows.Next() {
		var d, ts string
		if err := rows.Scan(&d, &ts); err == nil {
			domains = append(domains, d)
		}
	}
	if len(domains) == 0 {
		b.api.Send(tgbotapi.NewMessage(m.Chat.ID, "üìù –î–æ–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"))
		return
	}
	resp := fmt.Sprintf("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ %d –¥–æ–º–µ–Ω–æ–≤ (–æ–±—ã—á–Ω—ã–µ):\n\n", len(domains))
	for i, d := range domains {
		resp += fmt.Sprintf("%2d. <code>%s</code>\n", i+1, d)
	}
	msg := tgbotapi.NewMessage(m.Chat.ID, resp)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
}

func (b *Bot) handleHelpCommand(m *tgbotapi.Message) {
	help := `ü§ñ DNS Proxy Bot

üìã –ö–æ–º–∞–Ω–¥—ã:
/pass <–ø–∞—Ä–æ–ª—å>, /wg <username>

/add_nl <–ø–∞—Ç—Ç–µ—Ä–Ω>, /add_usa <–ø–∞—Ç—Ç–µ—Ä–Ω>
/remove_nl <–ø–∞—Ç—Ç–µ—Ä–Ω>, /remove_usa <–ø–∞—Ç—Ç–µ—Ä–Ω>

/site [–ø–∞—Ç—Ç–µ—Ä–Ω]
/nl [–ø–∞—Ç—Ç–µ—Ä–Ω], /usa [–ø–∞—Ç—Ç–µ—Ä–Ω], /ru [–ø–∞—Ç—Ç–µ—Ä–Ω]
/conn
/log [n]
/help

üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã:
[nlüá≥üá±]  - —á–µ—Ä–µ–∑ –ê–º—Å—Ç–µ—Ä–¥–∞–º
[usaüá∫üá∏] - —á–µ—Ä–µ–∑ –ê–º–µ—Ä–∏–∫—É
[ruüá∑üá∫]  - –Ω–∞–ø—Ä—è–º—É—é`
	b.api.Send(tgbotapi.NewMessage(m.Chat.ID, help))
}

// ====== —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ======

func (b *Bot) addPatternToFileNL(pattern string) error {
	f, err := os.OpenFile(patternFileNL, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer f.Close()
	_, err = f.WriteString(pattern + "\n")
	return err
}

func (b *Bot) addPatternToFileUSA(pattern string) error {
	f, err := os.OpenFile(patternFileUSA, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer f.Close()
	_, err = f.WriteString(pattern + "\n")
	return err
}

func (b *Bot) removePatternFromFileNL(pattern string) error {
	content, err := os.ReadFile(patternFileNL)
	if err != nil {
		return err
	}
	var newLines []string
	for _, line := range strings.Split(string(content), "\n") {
		if strings.TrimSpace(line) != pattern {
			newLines = append(newLines, line)
		}
	}
	return os.WriteFile(patternFileNL, []byte(strings.Join(newLines, "\n")), 0644)
}

func (b *Bot) removePatternFromFileUSA(pattern string) error {
	content, err := os.ReadFile(patternFileUSA)
	if err != nil {
		return err
	}
	var newLines []string
	for _, line := range strings.Split(string(content), "\n") {
		if strings.TrimSpace(line) != pattern {
			newLines = append(newLines, line)
		}
	}
	return os.WriteFile(patternFileUSA, []byte(strings.Join(newLines, "\n")), 0644)
}

func (b *Bot) removePatternFromOtherFile(pattern string, which string) error {
	var path string
	switch which {
	case "nl":
		path = patternFileNL
	case "usa":
		path = patternFileUSA
	default:
		return nil
	}
	content, err := os.ReadFile(path)
	if err != nil {
		if os.IsNotExist(err) {
			return nil
		}
		return err
	}
	var newLines []string
	for _, line := range strings.Split(string(content), "\n") {
		if strings.TrimSpace(line) != pattern {
			newLines = append(newLines, line)
		}
	}
	return os.WriteFile(path, []byte(strings.Join(newLines, "\n")), 0644)
}

// ====== –≤—ã—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ IP-–∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ map.json ======

func (b *Bot) getHistoricalIPs(pattern string) []string {
	domainIPs := b.getHistoricalIPsWithDomains(pattern)
	var ips []string
	for _, list := range domainIPs {
		ips = append(ips, list...)
	}
	return ips
}

func (b *Bot) getHistoricalIPsWithDomains(pattern string) map[string][]string {
	data, err := os.ReadFile(mapFile) // mapFile –æ–±—ä—è–≤–ª–µ–Ω –≤ main.go
	if err != nil {
		return map[string][]string{}
	}
	var m DomainIPMap
	if err := json.Unmarshal(data, &m); err != nil {
		return map[string][]string{}
	}
	out := make(map[string][]string)
	for domain, ips := range m {
		if strings.Contains(domain, pattern) {
			out[domain] = ips
		}
	}
	return out
}

// ====== –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ======

func (b *Bot) showAllPatterns(chatID int64) {
	pNL, _ := b.loadPatternsNL()
	pUS, _ := b.loadPatternsUSA()

	if len(pNL)+len(pUS) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, "üìù –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"))
		return
	}

	resp := fmt.Sprintf("üìù <b>–í—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã</b> (%d):\n\n", len(pNL)+len(pUS))
	if len(pNL) > 0 {
		resp += "üá≥üá± <b>NL (–ê–º—Å—Ç–µ—Ä–¥–∞–º):</b>\n"
		for _, p := range pNL {
			dm := b.getHistoricalIPsWithDomains(p)
			cnt := 0
			for _, ips := range dm {
				cnt += len(ips)
			}
			resp += fmt.Sprintf("   üîπ <code>%s</code> ‚Äî %d IP\n", p, cnt)
		}
		resp += "\n"
	}
	if len(pUS) > 0 {
		resp += "üá∫üá∏ <b>USA (–ê–º–µ—Ä–∏–∫–∞):</b>\n"
		for _, p := range pUS {
			dm := b.getHistoricalIPsWithDomains(p)
			cnt := 0
			for _, ips := range dm {
				cnt += len(ips)
			}
			resp += fmt.Sprintf("   üîπ <code>%s</code> ‚Äî %d IP\n", p, cnt)
		}
		resp += "\n"
	}
	resp += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/nl</code>, <code>/usa</code>, <code>/ru</code> –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"

	msg := tgbotapi.NewMessage(chatID, resp)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
}

func (b *Bot) showPatternsNL(chatID int64) {
	ps, err := b.loadPatternsNL()
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ NL –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"))
		return
	}
	if len(ps) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, "üìù NL –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"))
		return
	}
	resp := fmt.Sprintf("üá≥üá± <b>NL –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–ê–º—Å—Ç–µ—Ä–¥–∞–º)</b> (%d):\n\n", len(ps))
	for _, p := range ps {
		dm := b.getHistoricalIPsWithDomains(p)
		cnt := 0
		for _, ips := range dm {
			cnt += len(ips)
		}
		resp += fmt.Sprintf("üîπ <code>%s</code> ‚Äî %d IP\n", p, cnt)
	}
	resp += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/nl &lt;–ø–∞—Ç—Ç–µ—Ä–Ω&gt;</code> –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
	b.api.Send(tgbotapi.NewMessage(chatID, resp))
}

func (b *Bot) showPatternsUSA(chatID int64) {
	ps, err := b.loadPatternsUSA()
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ USA –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"))
		return
	}
	if len(ps) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, "üìù USA –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"))
		return
	}
	resp := fmt.Sprintf("üá∫üá∏ <b>USA –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–ê–º–µ—Ä–∏–∫–∞)</b> (%d):\n\n", len(ps))
	for _, p := range ps {
		dm := b.getHistoricalIPsWithDomains(p)
		cnt := 0
		for _, ips := range dm {
			cnt += len(ips)
		}
		resp += fmt.Sprintf("üîπ <code>%s</code> ‚Äî %d IP\n", p, cnt)
	}
	resp += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/usa &lt;–ø–∞—Ç—Ç–µ—Ä–Ω&gt;</code> –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
	msg := tgbotapi.NewMessage(chatID, resp)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
}

func (b *Bot) showPatternsRU(chatID int64) {
	resp := "üá∑üá∫ <b>RU –¥–æ–º–µ–Ω—ã (–ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)</b>:\n\n"
	resp += "–≠—Ç–∏ –¥–æ–º–µ–Ω—ã –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å–ø–∏—Å–∫–∞—Ö NL –∏–ª–∏ USA –∏ –∏–¥—É—Ç –Ω–∞–ø—Ä—è–º—É—é.\n\n"
	resp += "üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/ru &lt;–ø–∞—Ç—Ç–µ—Ä–Ω&gt;</code>\n"
	resp += "üí° –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/add_nl</code> –∏–ª–∏ <code>/add_usa</code>"
	msg := tgbotapi.NewMessage(chatID, resp)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
}

func (b *Bot) showPatternDetails(chatID int64, pattern string, routeType string) {
	domainIPs := b.getHistoricalIPsWithDomains(pattern)
	if len(domainIPs) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", pattern)))
		return
	}

	filtered := make(map[string][]string)
	for domain, ips := range domainIPs {
		var list []string
		for _, ip := range ips {
			stat := b.getIPRouteStatus(ip)
			switch routeType {
			case "nl":
				if strings.Contains(stat, "nlüá≥üá±") {
					list = append(list, ip)
				}
			case "usa":
				if strings.Contains(stat, "usaüá∫üá∏") {
					list = append(list, ip)
				}
			case "ru":
				if strings.Contains(stat, "ruüá∑üá∫") && !strings.Contains(stat, "usaüá∫üá∏") && !strings.Contains(stat, "nlüá≥üá±") {
					list = append(list, ip)
				}
			}
		}
		if len(list) > 0 {
			filtered[domain] = list
		}
	}

	if len(filtered) == 0 {
		routeNames := map[string]string{"nl": "NL (–ê–º—Å—Ç–µ—Ä–¥–∞–º)", "usa": "USA (–ê–º–µ—Ä–∏–∫–∞)", "ru": "RU (–Ω–∞–ø—Ä—è–º—É—é)"}
		b.api.Send(tgbotapi.NewMessage(chatID,
			fmt.Sprintf("‚ùå IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ '%s' —Å –º–∞—Ä—à—Ä—É—Ç–æ–º %s –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", pattern, routeNames[routeType])))
		return
	}

	total := 0
	for _, ips := range filtered {
		total += len(ips)
	}
	for _, msgText := range b.createSiteMessages(pattern, filtered, total) {
		msg := tgbotapi.NewMessage(chatID, msgText)
		msg.ParseMode = "HTML"
		b.api.Send(msg)
		time.Sleep(100 * time.Millisecond)
	}
}

// ====== –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ======

func (b *Bot) loadPatternsNL() ([]string, error) {
	content, err := os.ReadFile(patternFileNL)
	if err != nil {
		if os.IsNotExist(err) {
			return []string{}, nil
		}
		return nil, err
	}
	var patterns []string
	for _, line := range strings.Split(string(content), "\n") {
		line = strings.TrimSpace(line)
		if line != "" && !strings.HasPrefix(line, "#") {
			patterns = append(patterns, line)
		}
	}
	return patterns, nil
}

func (b *Bot) loadPatternsUSA() ([]string, error) {
	content, err := os.ReadFile(patternFileUSA)
	if err != nil {
		if os.IsNotExist(err) {
			return []string{}, nil
		}
		return nil, err
	}
	var patterns []string
	for _, line := range strings.Split(string(content), "\n") {
		line = strings.TrimSpace(line)
		if line != "" && !strings.HasPrefix(line, "#") {
			patterns = append(patterns, line)
		}
	}
	return patterns, nil
}

// ====== —Å–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ ======

func (b *Bot) createSiteMessages(pattern string, domainIPs map[string][]string, totalIPs int) []string {
	const maxMessageSize = 4000
	var messages []string
	current := fmt.Sprintf("üåê <b>IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ '%s'</b> (%d –¥–æ–º–µ–Ω–æ–≤, %d IP):\n\n",
		pattern, len(domainIPs), totalIPs)

	for domain, ips := range domainIPs {
		block := b.createDomainBlock(domain, ips)
		if len(current)+len(block) > maxMessageSize {
			messages = append(messages, current)
			current = fmt.Sprintf("üåê <b>IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ '%s'</b> (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):\n\n", pattern)
		}
		current += block
	}
	if strings.TrimSpace(current) != "" {
		messages = append(messages, current)
	}
	return messages
}

func (b *Bot) getIPRouteStatus(ip string) string {
	if err := exec.Command("ipset", "test", ipsetNL, ip).Run(); err == nil {
		return "nlüá≥üá±"
	}
	if err := exec.Command("ipset", "test", ipsetUSA, ip).Run(); err == nil {
		return "usaüá∫üá∏"
	}
	return "ruüá∑üá∫"
}

func (b *Bot) createDomainBlock(domain string, ips []string) string {
	const maxIPsToShow = 20
	ipCount := len(ips)
	block := fmt.Sprintf("üåç <b>%s</b> ‚Äî %d IP\n", domain, ipCount)
	if ipCount <= 5 {
		for _, ip := range ips {
			block += fmt.Sprintf("   ‚Ä¢ <code>%s</code> [%s]\n", ip, b.getIPRouteStatus(ip))
		}
	} else {
		display := ips
		hasMore := false
		if ipCount > maxIPsToShow {
			display = ips[:maxIPsToShow]
			hasMore = true
		}
		var lines string
		for _, ip := range display {
			lines += fmt.Sprintf("   ‚Ä¢ <code>%s</code> [%s]\n", ip, b.getIPRouteStatus(ip))
		}
		if hasMore {
			lines += fmt.Sprintf("   ... –∏ –µ—â–µ %d IP –∞–¥—Ä–µ—Å–æ–≤", ipCount-maxIPsToShow)
		}
		block += fmt.Sprintf("<blockquote expandable>%s</blockquote>\n", lines)
	}
	block += "\n"
	return block
}

func (b *Bot) createConnMessages(failed map[string][]string, totalIPs int) []string {
	const maxMessageSize = 4000
	var messages []string
	current := fmt.Sprintf("üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã</b> (%d –∑–∞–ø–∏—Å–µ–π, %d IP):\n\n",
		len(failed), totalIPs)
	for domain, ips := range failed {
		block := b.createDomainBlock(domain, ips)
		if len(current)+len(block) > maxMessageSize {
			messages = append(messages, current)
			current = "üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã</b> (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):\n\n"
		}
		current += block
	}
	if strings.TrimSpace(current) != "" {
		messages = append(messages, current)
	}
	return messages
}

// ===== –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –≤—ã–∑–æ–≤—ã ipset =====

func (b *Bot) addIPToIpsetNL(ip string) error  { return exec.Command("ipset", "add", ipsetNL, ip, "-exist").Run() }
func (b *Bot) addIPToIpsetUSA(ip string) error { return exec.Command("ipset", "add", ipsetUSA, ip, "-exist").Run() }
func (b *Bot) removeIPFromIpsetNL(ip string) error {
	return exec.Command("ipset", "del", ipsetNL, ip).Run()
}
func (b *Bot) removeIPFromIpsetUSA(ip string) error {
	return exec.Command("ipset", "del", ipsetUSA, ip).Run()
}

// ===== –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∞–ø–¥–µ–π—Ç–æ–≤ –±–æ—Ç–∞ =====

func (b *Bot) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := b.api.GetUpdatesChan(u)

	for up := range updates {
		if up.Message == nil {
			continue
		}
		txt := up.Message.Text
		switch {
		case strings.HasPrefix(txt, "/pass"):
			b.handlePassCommand(up.Message)
		case strings.HasPrefix(txt, "/wg"):
			b.handleWgCommand(up.Message)
		case strings.HasPrefix(txt, "/add_nl"):
			b.handleAddNLCommand(up.Message)
		case strings.HasPrefix(txt, "/add_usa"):
			b.handleAddUSACommand(up.Message)
		case strings.HasPrefix(txt, "/remove_nl"):
			b.handleRemoveNLCommand(up.Message)
		case strings.HasPrefix(txt, "/remove_usa"):
			b.handleRemoveUSACommand(up.Message)
		case strings.HasPrefix(txt, "/site"):
			b.handleSiteCommand(up.Message)
		case strings.HasPrefix(txt, "/nl"):
			b.handleNLCommand(up.Message)
		case strings.HasPrefix(txt, "/ru"):
			b.handleRuCommand(up.Message)
		case strings.HasPrefix(txt, "/usa"):
			b.handleUSACommand(up.Message)
		case strings.HasPrefix(txt, "/conn"):
			b.handleConnCommand(up.Message)
		case strings.HasPrefix(txt, "/log"):
			b.handleLogCommand(up.Message)
		case strings.HasPrefix(txt, "/help"):
			b.handleHelpCommand(up.Message)
		default:
			// –º–æ–ª—á–∏–º
		}
	}
}

func StartBot() {
	b, err := NewBot()
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: %v", err)
		return
	}
	go b.Start()
}

// ===== conntrack-—Ö–µ–ª–ø–µ—Ä—ã (–∫–∞–∫ —É —Ç–µ–±—è –≤ –∑–∞–º–µ—Ç–∫–∞—Ö) =====

func (b *Bot) getFailedConnections() map[string][]string {
	// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–≤–æ—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ netlink.ConntrackTableList
	// –û—Å—Ç–∞–≤–ª—è—é –∑–∞–≥–ª—É—à–∫—É, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥.
	_ = netlink.ConntrackTable
	_ = unix.AF_INET
	return map[string][]string{}
}
