#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ —á–µ—Ä–µ–∑ WG —Ç—É–Ω–µ–ª—å
# –¶–µ–ª—å: –∑–∞–≤–µ—Ä–Ω—É—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ IP/–¥–æ–º–µ–Ω—ã —á–µ—Ä–µ–∑ p.nirhub.ru

WG_GATEWAY="10.200.0.6"  # p.nirhub.ru –≤ WG —Å–µ—Ç–∏
LOG_FILE="/var/log/tunnel-routes.log"

# –î–æ–º–µ–Ω—ã/IP –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ —á–µ—Ä–µ–∑ —Ç—É–Ω–µ–ª—å (–±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å IP p.nirhub.ru)
TUNNEL_SERVICES=(
    "ifconfig.me"
    "icanhazip.com"
    "34.160.111.145"  # —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP ifconfig.me
)

# –î–æ–º–µ–Ω—ã/IP –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é (–±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å IP pg.gena.host) 
DIRECT_SERVICES=(
    "ipinfo.io"
    "api.ipify.org"
    "34.117.59.81"  # —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP ipinfo.io
)

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

# –ü–æ–ª—É—á–∏—Ç—å –í–°–ï IP –æ—Ç DNS
resolve_ips() {
    local domain="$1"
    dig +short "$domain" A | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'
}

# –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ WG
add_tunnel_route() {
    local target="$1"
    local added=0
    
    if [[ "$target" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        # –≠—Ç–æ —É–∂–µ IP
        if ip route add "$target/32" via "$WG_GATEWAY" dev wg200 2>/dev/null; then
            log "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: $target -> $WG_GATEWAY"
            ((added++))
        else
            log "‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è $target —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        fi
    else
        # –≠—Ç–æ –¥–æ–º–µ–Ω, —Ä–µ–∑–æ–ª–≤–∏–º –í–°–ï IP
        local ips=($(resolve_ips "$target"))
        if [[ ${#ips[@]} -gt 0 ]]; then
            for ip in "${ips[@]}"; do
                if ip route add "$ip/32" via "$WG_GATEWAY" dev wg200 2>/dev/null; then
                    log "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: $target ($ip) -> $WG_GATEWAY"
                    ((added++))
                else
                    log "‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è $target ($ip) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                fi
            done
        else
            log "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–∑–æ–ª–≤–∏—Ç—å $target"
        fi
    fi
    
    return $added
}

# –£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
del_tunnel_route() {
    local target="$1"
    local removed=0
    
    if [[ "$target" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        # –≠—Ç–æ —É–∂–µ IP
        if ip route del "$target/32" via "$WG_GATEWAY" dev wg200 2>/dev/null; then
            log "‚úÖ –£–¥–∞–ª–µ–Ω –º–∞—Ä—à—Ä—É—Ç: $target"
            ((removed++))
        else
            log "‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è $target –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    else
        # –≠—Ç–æ –¥–æ–º–µ–Ω, —Ä–µ–∑–æ–ª–≤–∏–º –í–°–ï IP
        local ips=($(resolve_ips "$target"))
        if [[ ${#ips[@]} -gt 0 ]]; then
            for ip in "${ips[@]}"; do
                if ip route del "$ip/32" via "$WG_GATEWAY" dev wg200 2>/dev/null; then
                    log "‚úÖ –£–¥–∞–ª–µ–Ω –º–∞—Ä—à—Ä—É—Ç: $target ($ip)"
                    ((removed++))
                else
                    log "‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è $target ($ip) –Ω–µ –Ω–∞–π–¥–µ–Ω"
                fi
            done
        fi
    fi
    
    return $removed
}

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ç—É–Ω–Ω–µ–ª–∏
setup_tunnels() {
    log "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Ç—É–Ω–Ω–µ–ª–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ WG –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–∫—Ç–∏–≤–µ–Ω
    if ! ip link show wg200 >/dev/null 2>&1; then
        log "‚ùå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å wg200 –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —à–ª—é–∑–∞
    if ! ping -c 1 -W 2 "$WG_GATEWAY" >/dev/null 2>&1; then
        log "‚ùå –®–ª—é–∑ $WG_GATEWAY –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    local added=0
    log "üìç –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —á–µ—Ä–µ–∑ —Ç—É–Ω–µ–ª—å..."
    for service in "${TUNNEL_SERVICES[@]}"; do
        if add_tunnel_route "$service"; then
            ((added++))
        fi
    done
    
    log "üìä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç—É–Ω–Ω–µ–ª–µ–π: $added"
    return 0
}

# –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—É–Ω–Ω–µ–ª–∏
remove_tunnels() {
    log "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—É–Ω–Ω–µ–ª–µ–π..."
    
    local removed=0
    for service in "${TUNNEL_SERVICES[@]}"; do
        if del_tunnel_route "$service"; then
            ((removed++))
        fi
    done
    
    log "üìä –£–¥–∞–ª–µ–Ω–æ —Ç—É–Ω–Ω–µ–ª–µ–π: $removed"
    return 0
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—É–Ω–Ω–µ–ª–µ–π
status_tunnels() {
    log "üìä –°—Ç–∞—Ç—É—Å —Ç—É–Ω–Ω–µ–ª–µ–π:"
    
    log "=== –ú–∞—Ä—à—Ä—É—Ç—ã —á–µ—Ä–µ–∑ —Ç—É–Ω–µ–ª—å (–¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å IP p.nirhub.ru: 159.69.33.152) ==="
    for service in "${TUNNEL_SERVICES[@]}"; do
        if [[ "$service" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # –≠—Ç–æ —É–∂–µ IP
            local route=$(ip route get "$service" 2>/dev/null | head -1)
            if echo "$route" | grep -q "via $WG_GATEWAY"; then
                log "‚úÖ $service: $route"
            else
                log "‚ùå $service: $route (–ù–ï –ß–ï–†–ï–ó –¢–£–ù–ï–õ–¨!)"
            fi
        else
            # –≠—Ç–æ –¥–æ–º–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ IP
            local ips=($(resolve_ips "$service"))
            for ip in "${ips[@]}"; do
                local route=$(ip route get "$ip" 2>/dev/null | head -1)
                if echo "$route" | grep -q "via $WG_GATEWAY"; then
                    log "‚úÖ $service ($ip): $route"
                else
                    log "‚ùå $service ($ip): $route (–ù–ï –ß–ï–†–ï–ó –¢–£–ù–ï–õ–¨!)"
                fi
            done
        fi
    done
    
    log ""
    log "=== –ü—Ä—è–º—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (–¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å IP pg.gena.host: 176.114.88.142) ==="
    for service in "${DIRECT_SERVICES[@]}"; do
        if [[ "$service" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # –≠—Ç–æ —É–∂–µ IP
            local route=$(ip route get "$service" 2>/dev/null | head -1)
            if echo "$route" | grep -q "via $WG_GATEWAY"; then
                log "‚ùå $service: $route (–ò–î–ï–¢ –ß–ï–†–ï–ó –¢–£–ù–ï–õ–¨!)"
            else
                log "‚úÖ $service: $route"
            fi
        else
            # –≠—Ç–æ –¥–æ–º–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ IP
            local ips=($(resolve_ips "$service"))
            for ip in "${ips[@]}"; do
                local route=$(ip route get "$ip" 2>/dev/null | head -1)
                if echo "$route" | grep -q "via $WG_GATEWAY"; then
                    log "‚ùå $service ($ip): $route (–ò–î–ï–¢ –ß–ï–†–ï–ó –¢–£–ù–ï–õ–¨!)"
                else
                    log "‚úÖ $service ($ip): $route"
                fi
            done
        fi
    done
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—É–Ω–Ω–µ–ª–∏
test_tunnels() {
    log "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É–Ω–Ω–µ–ª–µ–π..."
    
    log "=== –¢–µ—Å—Ç—ã —á–µ—Ä–µ–∑ —Ç—É–Ω–µ–ª—å ==="
    for service in "${TUNNEL_SERVICES[@]}"; do
        if [[ "$service" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # –î–ª—è IP –∏—Å–ø–æ–ª—å–∑—É–µ–º ifconfig.me
            local result=$(curl -s --max-time 10 "http://ifconfig.me" 2>/dev/null || echo "TIMEOUT")
            log "üìç ifconfig.me -> $result"
        else
            # –î–ª—è –¥–æ–º–µ–Ω–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –µ–≥–æ
            local result=$(curl -s --max-time 10 "http://$service" 2>/dev/null || echo "TIMEOUT")
            log "üìç $service -> $result"
        fi
    done
    
    log ""
    log "=== –¢–µ—Å—Ç—ã –ø—Ä—è–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ==="
    for service in "${DIRECT_SERVICES[@]}"; do
        if [[ "$service" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            local result=$(curl -s --max-time 10 "http://ipinfo.io/ip" 2>/dev/null || echo "TIMEOUT")
            log "üìç ipinfo.io -> $result"
        else
            local result=$(curl -s --max-time 10 "http://$service" 2>/dev/null || echo "TIMEOUT")
            log "üìç $service -> $result"
        fi
    done
}

case "$1" in
    setup|start)
        setup_tunnels
        ;;
    remove|stop)
        remove_tunnels  
        ;;
    restart)
        remove_tunnels
        sleep 2
        setup_tunnels
        ;;
    status)
        status_tunnels
        ;;
    test)
        test_tunnels
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {setup|remove|restart|status|test}"
        echo ""
        echo "  setup    - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ç—É–Ω–Ω–µ–ª–∏"
        echo "  remove   - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—É–Ω–Ω–µ–ª–∏"
        echo "  restart  - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É–Ω–Ω–µ–ª–∏"
        echo "  status   - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—É–Ω–Ω–µ–ª–µ–π"
        echo "  test     - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—É–Ω–Ω–µ–ª–∏"
        exit 1
        ;;
esac 