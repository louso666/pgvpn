#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è IP —á–µ—Ä–µ–∑ WG —Ç—É–Ω–µ–ª—å vs –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
# –£–º–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è - –¥–æ–±–∞–≤–ª—è–µ—Ç routes —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö IP

WG_GATEWAY="10.200.0.6"  # p.nirhub.ru –≤ WG —Å–µ—Ç–∏
LOG_FILE="/var/log/ip-test.log"

# –¢–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
ROUTE_SERVICES=(
    "ifconfig.me"
    "34.160.111.145"  # —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP ifconfig.me
)

NO_ROUTE_SERVICES=(
    "ipinfo.io" 
    "34.117.59.81"  # —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP ipinfo.io
)

ALL_SERVICES=(
    "ifconfig.me"
    "ipinfo.io"
    "icanhazip.com"
    "api.ipify.org"
    "checkip.amazonaws.com"
)

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

# –ü–æ–ª—É—á–∏—Ç—å IP –æ—Ç DNS
resolve_ip() {
    local domain="$1"
    dig +short "$domain" A | head -1 | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'
}

# –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ WG
add_route() {
    local target="$1"
    if [[ "$target" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        # –≠—Ç–æ —É–∂–µ IP
        ip route add "$target/32" via "$WG_GATEWAY" dev wg200 2>/dev/null
        echo "$target"
    else
        # –≠—Ç–æ –¥–æ–º–µ–Ω, —Ä–µ–∑–æ–ª–≤–∏–º
        local ip=$(resolve_ip "$target")
        if [[ -n "$ip" ]]; then
            ip route add "$ip/32" via "$WG_GATEWAY" dev wg200 2>/dev/null
            echo "$ip"
        fi
    fi
}

# –£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
del_route() {
    local target="$1"
    if [[ "$target" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        ip route del "$target/32" via "$WG_GATEWAY" dev wg200 2>/dev/null
    else
        local ip=$(resolve_ip "$target")
        [[ -n "$ip" ]] && ip route del "$ip/32" via "$WG_GATEWAY" dev wg200 2>/dev/null
    fi
}

# –¢–µ—Å—Ç HTTP –∑–∞–ø—Ä–æ—Å–∞
test_http() {
    local service="$1"
    local timeout=10
    
    if [[ "$service" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        # IP –∞–¥—Ä–µ—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º ifconfig.me
        curl -s --max-time "$timeout" "http://ifconfig.me" 2>/dev/null || echo "TIMEOUT"
    else
        # –î–æ–º–µ–Ω
        curl -s --max-time "$timeout" "http://$service" 2>/dev/null || echo "TIMEOUT" 
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
run_test() {
    local mode="$1"
    
    log "=== –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ($mode) ==="
    
    if [[ "$mode" == "routed" ]]; then
        log "–î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —á–µ—Ä–µ–∑ WG —Ç—É–Ω–µ–ª—å..."
        local routed_ips=()
        for service in "${ROUTE_SERVICES[@]}"; do
            local ip=$(add_route "$service")
            [[ -n "$ip" ]] && routed_ips+=("$ip")
        done
        
        log "–î–æ–±–∞–≤–ª–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è: ${routed_ips[*]}"
        sleep 2
    fi
    
    log "–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã..."
    for service in "${ALL_SERVICES[@]}"; do
        log "  $service -> $(test_http "$service")"
    done
    
    if [[ "$mode" == "routed" ]]; then
        log "–£–¥–∞–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã..."
        for service in "${ROUTE_SERVICES[@]}"; do
            del_route "$service"
        done
    fi
}

# –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç
compare_test() {
    log "üîç –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢ IP"
    
    log ""
    run_test "direct"
    
    log ""
    run_test "routed"
    
    log ""
    log "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –õ–æ–≥–∏ –≤ $LOG_FILE"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ WG
status() {
    log "=== –°—Ç–∞—Ç—É—Å WireGuard ==="
    wg show wg200
    
    log ""
    log "=== –ú–∞—Ä—à—Ä—É—Ç—ã –∫ —Ç–µ—Å—Ç–æ–≤—ã–º IP ==="
    for service in "${ROUTE_SERVICES[@]}" "${NO_ROUTE_SERVICES[@]}"; do
        if [[ ! "$service" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            local ip=$(resolve_ip "$service")
            [[ -n "$ip" ]] && service="$service ($ip)"
        fi
        
        local route=$(ip route get "$service" 2>/dev/null | head -1)
        log "  $service: $route"
    done
}

# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
cleanup() {
    log "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤..."
    
    for service in "${ALL_SERVICES[@]}" "${ROUTE_SERVICES[@]}" "${NO_ROUTE_SERVICES[@]}"; do
        del_route "$service"
    done
    
    log "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

case "$1" in
    test|compare)
        compare_test
        ;;
    routed)
        run_test "routed"
        ;;
    direct)
        run_test "direct"
        ;;
    status)
        status
        ;;
    cleanup)
        cleanup
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {test|routed|direct|status|cleanup}"
        echo ""
        echo "  test      - —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç (–ø—Ä—è–º–æ–µ + —á–µ—Ä–µ–∑ —Ç—É–Ω–µ–ª—å)"
        echo "  routed    - —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ç—É–Ω–µ–ª—å"
        echo "  direct    - —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
        echo "  status    - —Å—Ç–∞—Ç—É—Å WG –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤"
        echo "  cleanup   - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã"
        exit 1
        ;;
esac 