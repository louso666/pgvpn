План реализации DNS прокси с Telegram ботом

1. **Модификация main.go**
   - Добавить сохранение IP->домен маппинга в /root/map.json
   - Добавить логирование всех DNS запросов (проксированных и обычных)
   - Реализовать функции для работы с JSON файлом без дублей

2. **Создание bot.go**
   - Embedded база данных (SQLite)
   - Система авторизации через пароль /pass xnbdjxnbdj
   - Команды:
     * /wg some-user-name - вызов /root/wg + возврат файла
     * /add-site figma - добавление паттерна в /root/site + добавление IP из истории в ipset
     * /ip figma - поиск всех IP по паттерну
     * /remove-site figma - удаление паттерна + очистка ipset
     * /conn - отображение неудачных подключений
   - Меню бота с описанием команд

3. **Интеграция conntrack**
   - Добавить мониторинг неудачных соединений
   - Связать IP с доменами из DNS истории

4. **Обновление deploy.sh**
   - Добавить копирование bot.go
   - Обновить зависимости в go.mod

5. **Структура данных**
   - JSON файл: {"domain": ["ip1", "ip2"]}
   - SQLite: таблицы для авторизации, логов DNS, связей IP-домен

Токен бота: 8153937790:AAE49qW06omMZs5yc5VzOCv3bpmwHe_zaqk 



========= исходное тз ==============
 @main.go @deploy.sh @dnspoxy.service @conn-track.md 
короче добавь чтобы каждый раз когда имя попадает под паттерн и оно роутится то эти ip сохранялись в json в /root/map.json без дублей.
{"some.site": ["some-ip"]}
дальше надо добавить телеграм бота чтобы управлять всем этим делом
сделай для бота отдельный .go файл чтобы не мешать все в одну кучу.
заюзай какую-то базу эмбедед для бота.
надо чтобы я мог бота добавить в канал, он спросил пароль при старте типа /pass xnbdjxnbdj
и только тогда отвечал на сообщения в чате любому человеку.
бот должен работать как в общих чатах так и в личных с ботом.
вот токен бота 8153937790:AAE49qW06omMZs5yc5VzOCv3bpmwHe_zaqk

надо чтобы была команда /wg some-user-name
эта команда должна вызвать утилиту /root/wg some-user-name
там в ответе будет конфиг wireguard надо его дать в ответном сообщении плюс дать его как файл wg200.conf (это будет добавлять wireguard пира)

дальше надо дать команду /add-site figma
эта команда добавит паттерн сайта в /root/site и сразу в рантайме тоже можно подцепить.
дальше команда /ip figma
вернет все ip которые роутятся которые попадают под все паттерны site в которых есть figma (то есть ищем все site строки с figma и ищем все ip по этим site в map.json или в эмбедед базе)

дальше команда /remove-site figma
которая удаляет паттерн из /root/site и удаляет из ipset все ip которые были привязаны к паттерну.

надо записывать все dns/ip адреса которые не были запроксированы чтобы потом можно было найти коннекты которые не смогли подключиться и по ip достать домены и потом по доменам добавить паттерны. то есть надо иметь еще один файл в котором будут все домены -> ip[] и флаг запроксирован или нет.

дальше по в команду /add-site figma надо добавить все ip которые сохранились в списке (которые мы не проксировали) чтобы они все попали в ipset 
(то есть добавили паттрен и не ждем очередного dns а сразу добавляем ip из истории)

далше по команде /conn печатаются все коннекты ip (только ip) которые не смогли установится, можешь смотреть как это можно сделать в файле conn-track.md и домены которые были связаны с этими ip
то есть 
домен 1
список ip через пробелы.
домен2 
....

плюс настрой боту менюшку чтобы все команды были видны с описанием.
сделай краткий план на все пункты которые я описал в plan.txt и следуй ему.